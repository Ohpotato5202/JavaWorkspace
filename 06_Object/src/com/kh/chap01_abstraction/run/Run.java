package com.kh.chap01_abstraction.run;

import com.kh.chap01_abstraction.model.vo.Student;

public class Run {
	
	public static void main(String[]args) {
		
		/*
		 * 1. 객체지향언어 : "객체" 를 "지향"하는 언어로 "객체중심"으로 돌아가는 언어
		 * 
		 * 2. 객체란 ? 사전적 의미로는 현실세계에 독립적으로 존재하는 모든것.
		 *           (유형, 무형, 사물, 개념)
		 *           자바에서의 객체는 new 연산자를 통해 메모리 영역에 생성된 데이터
		 *           
		 * 3. 객체지향 프로그램: 현실세계에서 독립적인 존재들간에 상호작용을 프로그래밍을 통해
		 *                   가상세계로 구현하는 과정
		 *                   
		 * 4. 구현하고자 하는 프로그램에서 필요한 객체를 만들기 위해서는 어떻게해야 하나?
		 *    ex) 쇼핑몰을 만든다고하면, 브랜드, 상품이라는 객체가 필요함.
		 *    => 클래스라는 틀을 통해 각 객체가 가지는 공통적인 속성을 추려내야함.
		 *    => 1단계 추상화과정을 진행후, 2단계로 캡슐화과정을 거쳐서 클래스를 생성.                 
		 * 
		 * 5. 추상화 과정
		 *    1) 내가 구현하고자 하는 프로그램에서 필요한 객체들이 뭐가 있는지 생각해보기
		 *      ex) 학생관리 프로그램 => 학생, 생활기록부, 출석부, 
		 *    2) 그 객체들이 가지고 있는 공통적인 속성, 기능들을 추출해보기(학생객체기준) 
		 *      ex) 이름, 성별, 거주지, 나이, 학년, 전화번호, 번호, 키, 시력
		 *    3) 추려진 공통적인 속성들을 가지고 구현해야할 프로그램에 "목적"에 맞춰서
		 *       불필요한 속성이나 기능들은 제거하기
		 *      ex) 학생의 "인적사항"을 관리하는 프로그램이라면 ? 키와 시력은 필요 없어 보임.
		 *                성적을 관리하는 프로그램이라면 ? 국어, 수학, 과학점수등,
		 *                                         점수를 이루는 데이터가 추가적으로 필요함
		 *                건강을 관리하는 프로그램이라면 ? 키 , 시력, BMI지수 등등이 필요함           
		 *                              
		 *    4) 최종적으로 추려진 속성들을 가지고 어떤 자료형으로, 어떤 변수명으로 각각의
		 *       데이터를 보관할건지 생각해보기
		 *       이름 => String name;
		 *       나이 => int age;
		 *       키   => double height;
		 *    
		 *      
		 * 
		 * */
		
		// 학생객체 생성하기. // 임폴트 생성해야함
		Student hong = new Student(); // 홍길동 객체 생성
		hong.name = "홍길동";
		hong.age = 20;
		hong.height = 180.1;
		
//		System.out.println(hong.name);
	
		
		Student kim = new Student(); // 김영희 객체 생성
		kim.name = "김영희";
		kim.age = 20;
		kim.height = 164.8;
		
		System.out.println(kim.name);
		
		
		// 여러분 본인 학생객체 생성후, 출력문 출력
		// xxx님의 나이는 xx살이고, 키는 xxcm입니다.
		
		Student kmu= new Student();
		kmu.name = "김민욱";
		kmu.age = 26;
		kmu.height = 179.1;
		
		System.out.printf("%s님의 나이는 %d살이고 키는 %.1fcm입니다." ,
				kmu.name, kmu.age, kmu.height);
		
		/*
		 * 필드의 접근제한자를 public설정시
		 * 외부에서 값을 변질시키거나, 조회권한이 없음에도 쉽게 값을 확인할 수 있다.
		 * 캡슐화를 통해 집적적인 접근을 막아서 보안문제를 해결해줘야한다.
		 * */
		
		
		
	}

}
